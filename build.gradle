/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 * Description:
    Build configuration for android with Scala and Eclipse
 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 */
repositories{
    mavenCentral()
    jcenter()
}

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:1.2+'
        classpath 'jp.leafytree.gradle:gradle-android-scala-plugin:1.4'
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.4'
    }
}

tasks.withType(ScalaCompile){
    scalaCompileOptions.useCompileDaemon = true
}
apply plugin: 'com.android.application'
apply plugin: 'jp.leafytree.android-scala'
apply plugin: 'android-apt'
def AAVersion = '3.3.2'

android {

    lintOptions {
      abortOnError false
    }

    buildToolsVersion "22.0.1"
    compileSdkVersion 22

    defaultConfig {
        minSdkVersion 17
        targetSdkVersion 22
        versionCode 1
        versionName "1.0"
    }

    sourceSets {
		main {
            scala{
                srcDir 'src/main/scala'
            }
            
            java{
                srcDir 'src/main/java'
            }

            manifest.srcFile 'AndroidManifest.xml'
            resources.srcDirs = ['src/main/resources']
            aidl.srcDirs = ['src/main']
            renderscript.srcDirs = ['src/main']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

        instrumentTest.setRoot('tests')
        androidTest.setRoot('tests')
    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'org.scala-lang:scala-library:2.11.1'
    apt "org.androidannotations:androidannotations:$AAVersion"
    compile "org.androidannotations:androidannotations-api:$AAVersion"
}

apt {
    arguments {
        androidManifestFile variant.outputs[0].processResources.manifestFile
        // if you have multiple outputs (when using splits), you may want to have other index than 0

        // you should set your package name here if you are using different application IDs
        // resourcePackageName "your.package.name"

        // You can set optional annotation processing options here, like these commented options:
        // logLevel 'INFO'
        // logFile '/var/log/aa.log'
    }
}

task wrapper(type: Wrapper) {
   gradleVersion = '2.2.1' //version required
}

import groovy.xml.StreamingMarkupBuilder

task gradleDep2EclipseClasspath() {
 description "Merge gradle dependencies into the eclipse class path"

 def files = ["compile", "releaseCompile", "debugCompile", "instrumentTestCompile"]
   .collect {project.configurations[it].files}
   .inject([] as Set) {result, files -> result + files}
   .asList()
   .unique()
   .grep {! it.@path.toString().contains("android-support")}

  def classpath = new XmlParser().parse(file(".classpath"))
  def libs = classpath.grep {it.'@gradle-dependency' == "true"}
  libs.each {classpath.remove(it)}

  files.collect {file ->
     new Node(null, "classpathentry", [
       "path": file.toString(),
       "kind": "lib",
       "exported": "true",
       "gradle-dependency": "true"
     ])
  }.each {classpath.append(it)}

  file(".classpath").withWriter {writer ->
     writer << new StreamingMarkupBuilder().bind { mkp.xmlDeclaration() }
     def printer = new XmlNodePrinter(new PrintWriter(writer))
     printer.print(classpath)
  }
}
